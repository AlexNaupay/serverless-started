service: serverless-started-service
frameworkVersion: '3'

package:
  individually: true
  patterns:
    - "!*/**"  # Exclude all!
    - "!**"  # Exclude all!
    - "!*.zip"
    #- "!.dynamodb"
    #- "!node_modules"
    #- "!.venv"
    #- "!.github"

provider:
  name: aws
  runtime: nodejs16.x
  # region: us-west-2  # default us-west-1
  apiGateway:
    apiKeys:
      - SERVERLESS_STARTED_API_KEY  # Use with x-api-key Header
  iam:
    role:
      statements:
        - Effect: Allow
          #Action: "dynamodb:*"
          #Resource: { "Fn::GetAtt": [ "usersTable", "Arn" ] }  # Better
          #Resource: arn:aws:dynamodb:us-east-1:471893938953:table/usersTable
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: { "Fn::GetAtt": [ "usersTable", "Arn" ] }
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:PutBucketPolicy'
          Resource: { "Fn::GetAtt": [ "MyS3Bucket", "Arn" ] }
        - Effect: Allow
          Action: 's3:*'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: 'MyS3Bucket'
                - '/*'
  environment:
    BUCKET_NAME: !Ref MyS3Bucket
    #SECRET_EGG: ${ssm:/SECRET_EGG}  # From system manager > parameter store
    SECRET_EGG: a-secret-egg

functions:
  my-authorizer:
    handler: authorizer/handler.index  # file.function
    package:
      patterns:
        - "authorizer/handler.js"
  hello:
    handler: users-get/handler.index  # file.function
    package:
      patterns:
        - "users-get/handler.js"
    events:
      - http:
          path: /hello
          method: GET
  get-user:
    handler: users-get/handler.getUser  # file.function
    package:
      patterns:
        - "users-get/handler.js"
    events:
      - http:
          path: /users/{id}
          private: true  # With API key
          method: GET
          request:
            parameters:
              paths:
                id: true
  get-users:
    handler: users-get/handler.getUsers  # file.function
    package:
      patterns:
        - "users-get/handler.js"
    events:
      - http:
          path: /users
          method: GET
          authorizer:
            name: my-authorizer
            resultTtlInSeconds: 30  # Cache
            type: token
            identitySource: method.request.header.Authorization
  store-user:
    handler: users-create/handler.store  # file.function
    package:
      patterns:
        - "users-create/handler.js"
    events:
      - http:
          path: /users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user.json)}
  update-user:
    handler: users-update/handler.update  # file.function
    package:
      patterns:
        - "users-update/handler.js"
    events:
      - http:
          path: /users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user.json)}

  delete-user:
    handler: users-delete/handler.delete  # file.function
    package:
      patterns:
        - "users-delete/handler.py"
    runtime: python3.10
    #environment:
    #    VIRTUAL_ENV_PATH: .venv
    events:
      - http:
          path: /users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  sign-url:
    handler: sign-url/handler.signS3Url  # file.function
    package:
      patterns:
        - "sign-url/handler.js"
    events:
      - http:
          path: /sign-url
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: !Ref MyS3Bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-apigateway-service-proxy
  - serverless-lift
custom:
  serverless-dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      docker: false
      migrate: true
  serverless-offline:
    apiKey: crud-serverless-users-apikey
  apiGatewayServiceProxies:
    - sqs:
        path: /like-user
        method: post
        queueName: likes-queue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - nodejs16.x
    package:
      artifact: nodejs.zip
constructs:
  my-queue:
    type: queue
    batchSize: 1
    worker:
      handler: like-user/handler.index
#      reservedConcurrency: 1
      package:
        patterns:
          - "like-user/handler.js"
    # sls logs --function my-queueWorker
    extensions:
      queue:
        Properties:
          QueueName: likes-queue
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MyS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: bucket-serverless-started-course-1991
        # AccessControl: PublicRead
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: 'MyS3Bucket'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'MyS3Bucket'
                    - '/*'
